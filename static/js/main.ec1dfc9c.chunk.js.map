{"version":3,"sources":["components/App/Sidebar/SearchBar/SearchBar.js","components/App/Sidebar/TodayWeather/TodayWeather.js","components/App/Sidebar/Sidebar.js","components/App/Forecast/Thumbnail/Thumbnail.js","components/App/Forecast/Forecast.js","components/App/APIService/APIService.js","components/App/index.js","serviceWorker.js","index.js"],"names":["SearchBar","props","className","onKeyDown","keydown","TodayWeather","weatherData","name","country","currentTemp","weatherDesc","src","weatherIcon","Sidebar","handleKeyDown","bind","state","city","weatherInfo","error","e","key","this","handleEnter","target","value","length","JSON","parse","React","Component","Thumbnail","forecastData","alt","dayToDisplay","hourToDisplay","Forecast","items","map","oneDay","i","toString","APIService","apiKey","apiUrlWeather","apiUrlForecast","defaultCity","weekday","0","1","2","3","4","5","6","date","string","getHours","getMinutes","json","jsonData","data","main","temp","weather","description","icon","sys","stringify","week","list","weekData","push","sanitizeOneDayForecast","first","second","s","dateWeather","Date","dt","dateNow","dateTomorrow","getFullYear","getMonth","getDate","dateToDisplay","getDay","charAt","toUpperCase","slice","service","App","useState","loading","appState","setAppState","event","weatherRequest","axios","get","getApiUrlWeather","getApiKey","forecastRequest","getApiUrlForecast","all","then","spread","responseOne","responseTwo","sanitizeDataWeather","sanitizeDataForecast","catch","errors","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.ec1dfc9c.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./SearchBar.css\";\r\n\r\nfunction SearchBar (props) {\r\n    return (\r\n        <div className=\"component-search-input\">\r\n            <input onKeyDown={props.keydown} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\n\r\n    function TodayWeather(props) {\r\n\r\n        return (\r\n            <div className=\"mt-5 mb-5\">\r\n                <h1>{props.weatherData.name}&nbsp;{props.weatherData.country ? '(' + props.weatherData.country  + ')' : ''}</h1>\r\n                <h1>{props.weatherData.currentTemp ? props.weatherData.currentTemp + \"°\" : \"\"}</h1>\r\n                <h1>{props.weatherData.weatherDesc}</h1>\r\n                <img className=\"\" src={props.weatherData.weatherIcon ? props.weatherData.weatherIcon : \"\"} />\r\n            </div>\r\n        );\r\n    }\r\n\r\nexport default TodayWeather;\r\n","import React from 'react';\r\nimport SearchBar from './SearchBar';\r\nimport TodayWeather from './TodayWeather';\r\n\r\nimport \"./Sidebar.css\";\r\n\r\nexport default class Sidebar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        // Bind the this context to the handler function\r\n        this.handleKeyDown = this.handleKeyDown.bind(this);\r\n\r\n        // Set some state\r\n        this.state = {\r\n            city: this.props.city,\r\n            weatherInfo: null,\r\n            error: false,\r\n        };\r\n    }\r\n\r\n    handleKeyDown (e) {\r\n        if(e.key === \"Enter\") {\r\n            this.props.handleEnter(e.target.value);\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let weatherData = this.props.weatherData;\r\n\r\n        // If not empty\r\n        if(weatherData.length > 0) {\r\n            weatherData = JSON.parse(weatherData);\r\n        }\r\n\r\n        return (\r\n            <div className=\"component-sidebar\">\r\n                <h1 className=\"mb-5\">Today's weather</h1>\r\n                <SearchBar city={this.state.city} keydown={this.handleKeyDown} />\r\n                <TodayWeather weatherData={weatherData}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './Thumbnail.css';\r\n\r\nfunction Thumbnail(props) {\r\n    return (\r\n        <div className=\"\" >\r\n            <h4>{props.forecastData.currentTemp ? props.forecastData.currentTemp + \"°\" : \"\"}</h4>\r\n            <p>{props.forecastData.weatherDesc}</p>\r\n            <img className=\"\" src={props.forecastData.weatherIcon ? props.forecastData.weatherIcon : \"\"} alt=\"Weather Icon\"/>\r\n            <h4>{props.forecastData.dayToDisplay}</h4>\r\n            <h5>{props.forecastData.hourToDisplay}</h5>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Thumbnail;\r\n","import React from 'react';\r\nimport './Forecast.css';\r\nimport Thumbnail from './Thumbnail';\r\nimport { CSSTransitionGroup } from 'react-transition-group'\r\n\r\nexport default class Forecast extends React.Component {\r\n    render() {\r\n\r\n        let forecastData = this.props.forecastData;\r\n        let items = [];\r\n\r\n        if(forecastData.length) {\r\n            forecastData = JSON.parse(this.props.forecastData);\r\n            items = forecastData.map((oneDay, i) => (\r\n                <div className=\"wrapper-thumbnail mt-5 mb-5 ml-2 mr-2 col-xs-6 col-md-6 col-lg-3 col-xl-2 text-center\">\r\n                    <Thumbnail key={i.toString()} forecastData={oneDay} />\r\n                </div>\r\n            ));\r\n        }\r\n\r\n        return(\r\n            <div className=\"component-forecast\">\r\n                <h1 className=\"text-center\">Forecast</h1>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        {items}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n","export default class APIService {\r\n\r\n    constructor() {\r\n        this.apiKey = \"109ff3545de4ef5f87dacbb3775a0e1f\";\r\n        this.apiUrlWeather = \"https://api.openweathermap.org/data/2.5/weather\";\r\n        this.apiUrlForecast = \"https://api.openweathermap.org/data/2.5/forecast\";\r\n        this.defaultCity = \"Nice\";\r\n        this.weekday = {\r\n            0: \"Sunday\",\r\n            1: \"Monday\",\r\n            2: \"Tuesday\",\r\n            3: \"Wednesday\",\r\n            4: \"Thursday\",\r\n            5: \"Friday\",\r\n            6: \"Saturday\",\r\n        };\r\n    }\r\n\r\n    getApiKey() {\r\n        return this.apiKey;\r\n    }\r\n\r\n    getApiUrlWeather() {\r\n        return this.apiUrlWeather;\r\n    }\r\n    getApiUrlForecast() {\r\n        return this.apiUrlForecast;\r\n    }\r\n    getDefaultCity() {\r\n        return this.defaultCity;\r\n    }\r\n\r\n    hourToDisplay(date) {\r\n        var string = \"\";\r\n        string += date.getHours() < 10 ? \"0\" + date.getHours() : date.getHours();\r\n        string += \":\";\r\n        string += date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes();\r\n        return string;\r\n    }\r\n\r\n\r\n    sanitizeDataWeather(json) {\r\n        var jsonData = {\r\n            name: json.data.name,\r\n            currentTemp: json.data.main.temp,\r\n            weatherDesc: json.data.weather[0].description,\r\n            weatherIcon: \"http://openweathermap.org/img/wn/\" + json.data.weather[0].icon + \"@2x.png\",\r\n            country: json.data.sys.country\r\n        };\r\n\r\n        return JSON.stringify(jsonData);\r\n    }\r\n\r\n    sanitizeDataForecast(json) {\r\n        const week = json.data.list;\r\n        var weekData = [];\r\n\r\n        for(var i = 0; i < 8; i++) {\r\n            weekData.push(this.sanitizeOneDayForecast(week[i]));\r\n        }\r\n\r\n        return JSON.stringify(weekData);\r\n    }\r\n\r\n    sanitizeOneDayForecast (json) {\r\n        const dateWeather = new Date(json.dt * 1000);\r\n        const dateNow = new Date();\r\n        var dateTomorrow = new Date(dateNow.getFullYear(), dateNow.getMonth(), dateNow.getDate() + 1);\r\n\r\n        const datesAreOnSameDay = (first, second) =>\r\n            first.getFullYear() === second.getFullYear() &&\r\n            first.getMonth() === second.getMonth() &&\r\n            first.getDate() === second.getDate();\r\n\r\n        const capitalize = (s) => {\r\n            if (typeof s !== 'string') return ''\r\n            return s.charAt(0).toUpperCase() + s.slice(1)\r\n        }\r\n\r\n        if(datesAreOnSameDay(dateWeather, dateNow)) {\r\n            var dateToDisplay = \"Today\";\r\n        } else if(dateTomorrow.getFullYear() == dateWeather.getFullYear() && dateTomorrow.getMonth() == dateWeather.getMonth() && dateTomorrow.getDate() == dateWeather.getDate()) {\r\n            var dateToDisplay = \"Tomorrow\";\r\n        } else {\r\n            var dateToDisplay = this.weekday[dateWeather.getDay()];\r\n        }\r\n\r\n        var jsonData = {\r\n            currentTemp: json.main.temp,\r\n            weatherDesc: capitalize(json.weather[0].description),\r\n            weatherIcon: \"http://openweathermap.org/img/wn/\" + json.weather[0].icon + \"@2x.png\",\r\n            dayToDisplay: dateToDisplay,\r\n            hourToDisplay: this.hourToDisplay(dateWeather),\r\n        };\r\n\r\n        return jsonData;\r\n    }\r\n}\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Sidebar from './Sidebar';\r\nimport Forecast from './Forecast';\r\nimport APIService from './APIService';\r\nimport axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst service = new APIService();\r\n\r\nfunction App () {\r\n\r\n    const [appState, setAppState] = useState({\r\n        loading: false,\r\n        weatherData: [],\r\n        forecastData: [],\r\n        city: null,\r\n    });\r\n\r\n    const fetchApiData = (event) => {\r\n        const weatherRequest = axios.get(`${service.getApiUrlWeather()}?appid=${service.getApiKey()}&q=${event}&units=metric&lang=fr`);\r\n        const forecastRequest = axios.get(`${service.getApiUrlForecast()}?appid=${service.getApiKey()}&q=${event}&units=metric&lang=fr`);\r\n\r\n        axios.all([weatherRequest, forecastRequest])\r\n            .then(axios.spread((...responses) => {\r\n                const responseOne = responses[0];\r\n                const responseTwo = responses[1];\r\n\r\n                setAppState({\r\n                    weatherData: service.sanitizeDataWeather(responseOne),\r\n                    forecastData: service.sanitizeDataForecast(responseTwo)\r\n                });\r\n            // use/access the results\r\n            })).catch(errors => {\r\n\r\n        })\r\n    }\r\n\r\n    //fetchApiData(service.getDefaultCity());\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n            </header>\r\n            <body className=\"App-body\">\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row h-100\">\r\n                        <div className=\"col-xs-12 col-md-6 col-lg-4 col-xl-3 mt-3 mb-3 text-center\">\r\n                            <Sidebar\r\n                                city={appState.city}\r\n                                weatherData={appState.weatherData ? appState.weatherData : false}\r\n                                handleEnter={fetchApiData}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-xs-12 col-md-6 col-lg-8 col-xl-9 mt-3 mb-3\">\r\n                            <Forecast\r\n                                city={appState.city}\r\n                                forecastData={appState.forecastData ? appState.forecastData : false}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </body>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}