{"version":3,"sources":["components/App/Sidebar/SearchBar/SearchBar.js","components/App/Sidebar/TodayWeather/TodayWeather.js","components/App/Sidebar/TodayForecast/SmallThumbnail/SmallThumbnail.js","components/App/Sidebar/TodayForecast/TodayForecast.js","components/App/Sidebar/Sidebar.js","components/App/Forecast/Thumbnail/Thumbnail.js","components/App/Forecast/Forecast.js","components/App/APIService/APIService.js","components/App/index.js","serviceWorker.js","index.js"],"names":["SearchBar","props","className","onKeyDown","keydown","TodayWeather","todaySummary","name","country","currentTemp","weatherDesc","src","weatherIcon","SmallThumbnail","console","log","todayForecast","hourToDisplay","alt","TodayForecast","forecastData","this","items","length","map","oneDay","i","key","toString","React","Component","Sidebar","handleKeyDown","bind","state","city","weatherInfo","error","e","handleEnter","target","value","JSON","parse","Thumbnail","dayToDisplay","Forecast","APIService","capitalize","s","charAt","toUpperCase","slice","apiKey","apiUrlWeather","apiUrlForecast","defaultCity","weekday","0","1","2","3","4","5","6","date","string","getHours","getMinutes","json","jsonData","data","Math","floor","main","temp","weather","description","icon","sys","stringify","forecast","list","fullForecastData","remainingForecast","push","sanitizeOneDayForecast","first","second","dateWeather","Date","dt","dateNow","dateTomorrow","getFullYear","getMonth","getDate","dateToDisplay","getDay","service","App","useState","loading","appState","setAppState","event","todayWeatherRequest","axios","get","getApiUrlWeather","getApiKey","forecastRequest","getApiUrlForecast","all","then","spread","todayWeatherRes","forecastRes","forecastSanitizing","sanitizeDataForecast","sanitizeDataWeather","catch","errors","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.13891b1c.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./SearchBar.css\";\r\n\r\nfunction SearchBar (props) {\r\n    return (\r\n        <div className=\"component-search-input\">\r\n            <input onKeyDown={props.keydown} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\n\r\n    function TodayWeather(props) {\r\n\r\n        return (\r\n            <div className=\"mt-5\">\r\n                <h1>{props.todaySummary.name}&nbsp;{props.todaySummary.country ? '(' + props.todaySummary.country  + ')' : ''}</h1>\r\n                <h1>{props.todaySummary.currentTemp ? props.todaySummary.currentTemp + \"°\" : \"\"}</h1>\r\n                <h1>{props.todaySummary.weatherDesc}</h1>\r\n                <img className=\"\" src={props.todaySummary.weatherIcon ? props.todaySummary.weatherIcon : \"\"} />\r\n            </div>\r\n        );\r\n    }\r\n\r\nexport default TodayWeather;\r\n","import React from 'react';\r\nimport './SmallThumbnail.css';\r\n\r\nfunction SmallThumbnail(props) {\r\n    return (\r\n        <div className=\"\" >\r\n        {console.log(props)}\r\n            <h5>{props.todayForecast.hourToDisplay}</h5>\r\n            <img className=\"\" src={props.todayForecast.weatherIcon ? props.todayForecast.weatherIcon : \"\"} alt=\"Weather Icon\"/>\r\n            <h4>{props.todayForecast.currentTemp ? props.todayForecast.currentTemp + \"°\" : \"\"}</h4>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SmallThumbnail;\r\n","import React from 'react';\r\nimport \"./TodayForecast.css\";\r\nimport SmallThumbnail from \"./SmallThumbnail\";\r\n\r\nimport ScrollContainer from 'react-indiana-drag-scroll';\r\n\r\nexport default class TodayForecast extends React.Component {\r\n    render() {\r\n\r\n        let forecastData = this.props.todayForecast;\r\n        let items = [];\r\n\r\n        if(forecastData.length) {\r\n            //console.log(forecastData);\r\n            //forecastData = JSON.parse(this.props.todayForecast);\r\n            items = forecastData.map((oneDay, i) => (\r\n                <div className=\"wrapper-thumbnail mt-2 mb-5 ml-2 mr-2 col-xs-12 text-center\">\r\n                    <SmallThumbnail key={i.toString()} todayForecast={oneDay} />\r\n                </div>\r\n            ));\r\n        }\r\n\r\n        return(\r\n            <div className=\"component-forecast\">\r\n                <div className=\"container\">\r\n                    <ScrollContainer className=\"scroll-container\">\r\n                        <div className=\"row flex-nowrap wrapper-smallthumbnail\">\r\n                            {items}\r\n                        </div>\r\n                    </ScrollContainer>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport SearchBar from './SearchBar';\r\nimport TodayWeather from './TodayWeather';\r\nimport TodayForecast from './TodayForecast';\r\n\r\nimport \"./Sidebar.css\";\r\n\r\nexport default class Sidebar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        // Bind the this context to the handler function\r\n        this.handleKeyDown = this.handleKeyDown.bind(this);\r\n\r\n        // Set some state\r\n        this.state = {\r\n            city: this.props.city,\r\n            weatherInfo: null,\r\n            error: false,\r\n        };\r\n    }\r\n\r\n    handleKeyDown (e) {\r\n        if(e.key === \"Enter\") {\r\n            this.props.handleEnter(e.target.value);\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let todaySummary = this.props.todaySummary;\r\n        let todayForecast = this.props.todayForecast;\r\n\r\n        // If not empty today summary\r\n        if(todaySummary.length > 0) {\r\n            todaySummary = JSON.parse(todaySummary);\r\n        }\r\n        // If not empty forecast\r\n        if(todayForecast.length > 0) {\r\n            todayForecast = JSON.parse(todayForecast);\r\n        }\r\n\r\n        return (\r\n            <div className=\"component-sidebar\">\r\n                <h1 className=\"mb-5\">Today's weather</h1>\r\n                <SearchBar city={this.state.city} keydown={this.handleKeyDown} />\r\n                <TodayWeather todaySummary={todaySummary} />\r\n                <TodayForecast todayForecast={todayForecast} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './Thumbnail.css';\r\n\r\nfunction Thumbnail(props) {\r\n    return (\r\n        <div className=\"\" >\r\n            <h4>{props.forecastData.currentTemp ? props.forecastData.currentTemp + \"°\" : \"\"}</h4>\r\n            <p>{props.forecastData.weatherDesc}</p>\r\n            <img className=\"\" src={props.forecastData.weatherIcon ? props.forecastData.weatherIcon : \"\"} alt=\"Weather Icon\"/>\r\n            <h4>{props.forecastData.dayToDisplay}</h4>\r\n            <h5>{props.forecastData.hourToDisplay}</h5>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Thumbnail;\r\n","import React from 'react';\r\nimport './Forecast.css';\r\nimport Thumbnail from './Thumbnail';\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\n\r\nimport ScrollContainer from 'react-indiana-drag-scroll';\r\n\r\nexport default class Forecast extends React.Component {\r\n    render() {\r\n\r\n        let forecastData = this.props.forecastData;\r\n        let items = [];\r\n\r\n        if(forecastData.length) {\r\n            forecastData = JSON.parse(this.props.forecastData);\r\n            items = forecastData.map((oneDay, i) => (\r\n                <div className=\"wrapper-thumbnail mt-2 mb-2 ml-2 mr-2 col-xs-6 col-md-6 col-lg-3 col-xl-2 text-center\">\r\n                    <Thumbnail key={i.toString()} forecastData={oneDay} />\r\n                </div>\r\n            ));\r\n        }\r\n\r\n        return(\r\n            <div className=\"component-forecast\">\r\n                <h1 className=\"text-center\">Forecast</h1>\r\n                <div className=\"container\">\r\n                    <ScrollContainer className=\"scroll-container\">\r\n                        <div className=\"row flex-nowrap\">\r\n                            {items}\r\n                        </div>\r\n                    </ScrollContainer>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export default class APIService {\r\n\r\n    constructor() {\r\n        this.apiKey = \"109ff3545de4ef5f87dacbb3775a0e1f\";\r\n        this.apiUrlWeather = \"https://api.openweathermap.org/data/2.5/weather\";\r\n        this.apiUrlForecast = \"https://api.openweathermap.org/data/2.5/forecast\";\r\n        this.defaultCity = \"Nice\";\r\n        this.weekday = {\r\n            0: \"Sunday\",\r\n            1: \"Monday\",\r\n            2: \"Tuesday\",\r\n            3: \"Wednesday\",\r\n            4: \"Thursday\",\r\n            5: \"Friday\",\r\n            6: \"Saturday\",\r\n        };\r\n    }\r\n\r\n    getApiKey() {\r\n        return this.apiKey;\r\n    }\r\n\r\n    getApiUrlWeather() {\r\n        return this.apiUrlWeather;\r\n    }\r\n    getApiUrlForecast() {\r\n        return this.apiUrlForecast;\r\n    }\r\n    getDefaultCity() {\r\n        return this.defaultCity;\r\n    }\r\n\r\n    hourToDisplay(date) {\r\n        var string = \"\";\r\n        string += date.getHours() < 10 ? \"0\" + date.getHours() : date.getHours();\r\n        string += \":\";\r\n        string += date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes();\r\n        return string;\r\n    }\r\n\r\n    capitalize = (s) => {\r\n        if (typeof s !== 'string') return ''\r\n        return s.charAt(0).toUpperCase() + s.slice(1)\r\n    }\r\n\r\n\r\n    sanitizeDataWeather(json) {\r\n        var jsonData = {\r\n            name: json.data.name,\r\n            currentTemp: Math.floor(json.data.main.temp * 1) / 1,\r\n            weatherDesc: this.capitalize(json.data.weather[0].description),\r\n            weatherIcon: \"http://openweathermap.org/img/wn/\" + json.data.weather[0].icon + \"@2x.png\",\r\n            country: json.data.sys.country\r\n        };\r\n\r\n        return JSON.stringify(jsonData);\r\n    }\r\n\r\n    sanitizeDataForecast(json) {\r\n        const forecast = json.data.list;\r\n\r\n        const fullForecastData = {\r\n            todayForecast: [],\r\n            remainingForecast: []\r\n        };\r\n\r\n        for(var i = 0; i < 8; i++) {\r\n            fullForecastData.todayForecast.push(this.sanitizeOneDayForecast(forecast[i]));\r\n        }\r\n        for( i = 8; i < 39; i++) {\r\n            fullForecastData.remainingForecast.push(this.sanitizeOneDayForecast(forecast[i]));\r\n        }\r\n\r\n        return fullForecastData;\r\n    }\r\n\r\n    sanitizeOneDayForecast (json) {\r\n        const dateWeather = new Date(json.dt * 1000);\r\n        const dateNow = new Date();\r\n        var dateTomorrow = new Date(dateNow.getFullYear(), dateNow.getMonth(), dateNow.getDate() + 1);\r\n\r\n        const datesAreOnSameDay = (first, second) =>\r\n            first.getFullYear() === second.getFullYear() &&\r\n            first.getMonth() === second.getMonth() &&\r\n            first.getDate() === second.getDate();\r\n\r\n        if(datesAreOnSameDay(dateWeather, dateNow)) {\r\n            var dateToDisplay = \"Aujourd'hui\";\r\n        } else if(dateTomorrow.getFullYear() == dateWeather.getFullYear() && dateTomorrow.getMonth() == dateWeather.getMonth() && dateTomorrow.getDate() == dateWeather.getDate()) {\r\n            var dateToDisplay = \"Demain\";\r\n        } else {\r\n            var dateToDisplay = this.weekday[dateWeather.getDay()];\r\n        }\r\n\r\n        var jsonData = {\r\n            currentTemp: Math.floor(json.main.temp * 1) / 1,\r\n            weatherDesc: this.capitalize(json.weather[0].description),\r\n            weatherIcon: \"http://openweathermap.org/img/wn/\" + json.weather[0].icon + \"@2x.png\",\r\n            dayToDisplay: dateToDisplay,\r\n            hourToDisplay: this.hourToDisplay(dateWeather),\r\n        };\r\n\r\n        return jsonData;\r\n    }\r\n}\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Sidebar from './Sidebar';\r\nimport Forecast from './Forecast';\r\nimport APIService from './APIService';\r\nimport axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst service = new APIService();\r\n\r\nfunction App () {\r\n\r\n    const [appState, setAppState] = useState({\r\n        loading: false,\r\n        todaySummary: [],\r\n        todayForecast: [],\r\n        remainingForecast: [],\r\n        city: null,\r\n    });\r\n\r\n    const fetchApiData = (event) => {\r\n        const todayWeatherRequest = axios.get(`${service.getApiUrlWeather()}?appid=${service.getApiKey()}&q=${event}&units=metric&lang=fr`);\r\n        const forecastRequest = axios.get(`${service.getApiUrlForecast()}?appid=${service.getApiKey()}&q=${event}&units=metric&lang=fr`);\r\n\r\n        axios.all([todayWeatherRequest, forecastRequest])\r\n            .then(axios.spread((...responses) => {\r\n                const todayWeatherRes = responses[0];\r\n                const forecastRes = responses[1];\r\n\r\n                const forecastSanitizing = service.sanitizeDataForecast(forecastRes)\r\n\r\n                setAppState({\r\n                    todaySummary: service.sanitizeDataWeather(todayWeatherRes),\r\n                    todayForecast: JSON.stringify(forecastSanitizing.todayForecast),\r\n                    remainingForecast: JSON.stringify(forecastSanitizing.remainingForecast)\r\n                });\r\n\r\n            // use/access the results\r\n            })).catch(errors => {\r\n\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n            </header>\r\n            <body className=\"App-body\">\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row h-100\">\r\n                        <div className=\"col-xs-12 col-md-6 col-lg-4 col-xl-3 mt-3 mb-3 text-center\">\r\n                            <Sidebar\r\n                                city={appState.city}\r\n                                todaySummary={appState.todaySummary ? appState.todaySummary : false}\r\n                                todayForecast={appState.todayForecast ? appState.todayForecast : false}\r\n                                handleEnter={fetchApiData}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-xs-12 col-md-6 col-lg-8 col-xl-9 mt-3 mb-3\">\r\n                            <Forecast\r\n                                city={appState.city}\r\n                                forecastData={appState.remainingForecast ? appState.remainingForecast : false}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </body>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}