{"version":3,"sources":["components/App/Sidebar/SearchBar/SearchBar.js","components/App/Sidebar/TodayWeather/TodayWeather.js","components/App/Sidebar/TodayForecast/SmallThumbnail/SmallThumbnail.js","components/App/Sidebar/TodayForecast/TodayForecast.js","components/App/Sidebar/Sidebar.js","components/App/Forecast/Thumbnail/Thumbnail.js","components/App/Forecast/Forecast.js","components/App/APIService/APIService.js","components/App/index.js","serviceWorker.js","index.js"],"names":["SearchBar","props","className","onKeyDown","keydown","placeholder","TodayWeather","todaySummary","name","country","currentTemp","weatherDesc","src","weatherIcon","alt","SmallThumbnail","todayForecast","hour","TodayForecast","forecastData","this","items","length","map","oneDay","i","key","React","Component","Sidebar","handleKeyDown","bind","e","handleEnter","target","value","hourlyForecast","isDataLoaded","Thumbnail","dayName","Forecast","APIService","fetchApiData","cityName","coords","callback","todayWeather","path","baseURL","apiKey","latitude","longitude","defaultCity","axios","get","then","res","console","log","sanitizeDataWeather","data","coord","lat","lon","sanitizeForecast","hourly","dailyForecast","daily","catch","error","response","capitalize","s","charAt","toUpperCase","slice","iconBaseURL","weekday","date","string","getHours","getMinutes","json","Math","floor","main","temp","weather","description","icon","sys","currentDay","array","forEach","el","dateWeather","Date","dt","day","push","getDay","hourToDisplay","convertUTCDateToLocalDate","newDate","getTime","getTimezoneOffset","offset","hours","setHours","service","App","state","event","weatherData","setState","navigator","geolocation","getCurrentPosition","position","city","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e326ccfa.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./SearchBar.css\";\r\n\r\nfunction SearchBar (props) {\r\n    return (\r\n        <div className=\"component-search-input\">\r\n            <input onKeyDown={props.keydown} placeholder=\"Enter a city...\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\n\r\n    function TodayWeather(props) {\r\n\r\n        return (\r\n            <div className=\"mt-5\">\r\n                <h3>{props.todaySummary.name}&nbsp;{props.todaySummary.country ? '(' + props.todaySummary.country  + ')' : ''}</h3>\r\n                <h1>{props.todaySummary.currentTemp ? props.todaySummary.currentTemp + \"°\" : \"\"}</h1>\r\n                <h4>{props.todaySummary.weatherDesc}</h4>\r\n                <img className=\"\" src={props.todaySummary.weatherIcon ? props.todaySummary.weatherIcon : \"\"} alt=\"\" />\r\n            </div>\r\n        );\r\n    }\r\n\r\nexport default TodayWeather;\r\n","import React from 'react';\r\nimport './SmallThumbnail.css';\r\n\r\nfunction SmallThumbnail(props) {\r\n    return (\r\n        <div className=\"smallthumbnail\" >\r\n            <h5>{props.todayForecast.hour}</h5>\r\n            <img src={props.todayForecast.weatherIcon ? props.todayForecast.weatherIcon : \"\"} alt=\"Weather Icon\" />\r\n            <h4>{props.todayForecast.currentTemp ? props.todayForecast.currentTemp + \"°\" : \"\"}</h4>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SmallThumbnail;\r\n","import React from 'react';\r\nimport \"./TodayForecast.css\";\r\nimport SmallThumbnail from \"./SmallThumbnail\";\r\nimport ScrollContainer from 'react-indiana-drag-scroll';\r\n\r\nexport default class TodayForecast extends React.Component {\r\n    render() {\r\n        let forecastData = this.props.todayForecast;\r\n        let items = [];\r\n\r\n        if (forecastData.length) {\r\n            items = forecastData.map((oneDay, i) => (\r\n                <div key={i} className=\"wrapper-thumbnail mt-2 mb-5 ml-2 mr-2 col-xs-12 text-center\">\r\n                    <SmallThumbnail  todayForecast={oneDay} />\r\n                </div>\r\n            ));\r\n        }\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <ScrollContainer className=\"scroll-container\">\r\n                    <div className=\"row flex-nowrap wrapper-smallthumbnail\">\r\n                        {items}\r\n                    </div>\r\n                </ScrollContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport SearchBar from './SearchBar';\r\nimport TodayWeather from './TodayWeather';\r\nimport TodayForecast from './TodayForecast';\r\n\r\nimport \"./Sidebar.css\";\r\n\r\nexport default class Sidebar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleKeyDown = this.handleKeyDown.bind(this);\r\n    }\r\n\r\n    handleKeyDown(e) {\r\n        if (e.key === \"Enter\") {\r\n            this.props.handleEnter(e.target.value);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let todaySummary = this.props.todaySummary;\r\n        let hourlyForecast = this.props.hourlyForecast;\r\n\r\n        return (\r\n\r\n            <div className={`component-sidebar d-flex flex-column justify-content-center ${this.props.isDataLoaded ? \"fullheight\" : \"\"}`} >\r\n                <h1 className=\"mb-5\">Today's weather</h1>\r\n                <SearchBar keydown={this.handleKeyDown} />\r\n                { this.props.isDataLoaded &&\r\n                    <div>\r\n                        <TodayWeather todaySummary={todaySummary} />\r\n                        <TodayForecast todayForecast={hourlyForecast} />\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './Thumbnail.css';\r\n\r\nfunction Thumbnail(props) {\r\n    return (\r\n        <div className=\"thumbnail d-flex flex-column justify-content-around\">\r\n            <div>\r\n                <h4>{props.forecastData.currentTemp ? props.forecastData.currentTemp + \"°\" : \"\"}</h4>\r\n                <p>{props.forecastData.weatherDesc}</p>\r\n            </div>\r\n            <div>\r\n                <img src={props.forecastData.weatherIcon ? props.forecastData.weatherIcon : \"\"} alt=\"Weather Icon\" />\r\n                <h4>{props.forecastData.dayName}</h4>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Thumbnail;\r\n","import React from 'react';\r\nimport './Forecast.css';\r\nimport Thumbnail from './Thumbnail';\r\n\r\nexport default class Forecast extends React.Component {\r\n    render() {\r\n        let forecastData = this.props.forecastData;\r\n        let items = [];\r\n\r\n        if (forecastData.length) {\r\n            items = forecastData.map((oneDay, i) => (\r\n                <div key={i} className=\"wrapper-thumbnail mt-2 mb-2 col-xs-12 col-md-6 col-lg-3 col-xl-2 text-center\">\r\n                    <Thumbnail forecastData={oneDay} />\r\n                </div>\r\n            ));\r\n        }\r\n\r\n        return (\r\n            <div className=\"component-forecast\">\r\n                <h1 className=\"text-center\">Forecast</h1>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        {items}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import axios from 'axios';\r\n\r\nexport default class APIService {\r\n\r\n    constructor() {\r\n        this.apiKey = \"109ff3545de4ef5f87dacbb3775a0e1f\";\r\n        this.baseURL = \"https://api.openweathermap.org/data/2.5\";\r\n        this.iconBaseURL = \"https://openweathermap.org/img/wn/\";\r\n        this.defaultCity = \"Nice\";\r\n        this.weekday = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n    }\r\n\r\n    fetchApiData = (cityName, coords, callback) => {\r\n        var todayWeather;\r\n        var path;\r\n\r\n        if (coords) {\r\n            path = `${this.baseURL}/weather?appid=${this.apiKey}&lat=${coords.latitude}&lon=${coords.longitude}&units=metric`;\r\n        } else {\r\n            path = `${this.baseURL}/weather?appid=${this.apiKey}&q=${cityName ? cityName : this.defaultCity}&units=metric`;\r\n        }\r\n        \r\n        axios.get(path)\r\n            .then(res => {\r\n                console.log(res);\r\n                todayWeather = this.sanitizeDataWeather(res);\r\n                return axios.get(`${this.baseURL}/onecall?appid=${this.apiKey}&lat=${res.data.coord.lat}&lon=${res.data.coord.lon}&exclude=current&units=metric`);\r\n            }).then(res => {\r\n                console.log(res);\r\n                callback({\r\n                    todaySummary: todayWeather,\r\n                    hourlyForecast: this.sanitizeForecast(res.data.hourly, true),\r\n                    dailyForecast: this.sanitizeForecast(res.data.daily, false)\r\n                });\r\n            }).catch(error => console.log(error.response));\r\n    }\r\n\r\n    hourToDisplay(date) {\r\n        var string = \"\";\r\n        string += date.getHours() < 10 ? \"0\" + date.getHours() : date.getHours();\r\n        string += \":\";\r\n        string += date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes();\r\n        return string;\r\n    }\r\n\r\n    capitalize = (s) => {\r\n        if (typeof s !== 'string') return ''\r\n        return s.charAt(0).toUpperCase() + s.slice(1)\r\n    }\r\n\r\n    sanitizeDataWeather(json) {\r\n        var jsonData = {\r\n            name: json.data.name,\r\n            currentTemp: Math.floor(json.data.main.temp * 1) / 1,\r\n            weatherDesc: this.capitalize(json.data.weather[0].description),\r\n            weatherIcon: this.iconBaseURL + json.data.weather[0].icon + \"@2x.png\",\r\n            country: json.data.sys.country\r\n        };\r\n\r\n        return jsonData;\r\n    }\r\n\r\n    sanitizeForecast(json, currentDay) {\r\n        var array = [];\r\n\r\n        json.forEach(el => {\r\n            const dateWeather = new Date(el.dt * 1000);\r\n            var temp = el.temp.day ? el.temp.day : el.temp;\r\n\r\n            array.push({\r\n                currentTemp: Math.floor(temp * 1) / 1,\r\n                weatherDesc: this.capitalize(el.weather[0].description),\r\n                weatherIcon: this.iconBaseURL + el.weather[0].icon + \"@2x.png\",\r\n                dayName: this.weekday[dateWeather.getDay()],\r\n                hour: this.hourToDisplay(this.convertUTCDateToLocalDate(dateWeather)),\r\n            })\r\n        });\r\n\r\n        if (currentDay) {\r\n            return array.slice(0, 24);\r\n        } else {\r\n            return array.slice(1, 7);\r\n        }\r\n\r\n    }\r\n\r\n    convertUTCDateToLocalDate(date) {\r\n        var newDate = new Date(date.getTime() + date.getTimezoneOffset() * 60 * 1000);\r\n        var offset = date.getTimezoneOffset() / 60;\r\n        var hours = date.getHours();\r\n\r\n        newDate.setHours(hours - offset);\r\n\r\n        return newDate;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Sidebar from './Sidebar';\r\nimport Forecast from './Forecast';\r\nimport APIService from './APIService';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst service = new APIService();\r\n\r\nexport default class App extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.isDataLoaded = false;\r\n\r\n        this.fetchApiData = this.fetchApiData.bind(this);\r\n        this.state = {\r\n            todaySummary: null,\r\n            hourlyForecast: null,\r\n            dailyForecast: null\r\n        };\r\n    }\r\n\r\n    fetchApiData(event, coords) {\r\n        service.fetchApiData(event, coords, (weatherData) => {\r\n            this.isDataLoaded = true;\r\n            this.setState({\r\n                todaySummary: weatherData.todaySummary,\r\n                hourlyForecast: weatherData.hourlyForecast,\r\n                dailyForecast: weatherData.dailyForecast,\r\n            });\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition( (position) => {\r\n                console.log(position);\r\n                this.fetchApiData(null, position.coords);\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                </header>\r\n                <div className=\"App-body\">\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row h-100\">\r\n                            <div className=\"col-xs-12 col-md-6 col-lg-4 mt-3 mb-3 text-center\">\r\n                                <Sidebar\r\n                                    todaySummary={this.state.todaySummary ? this.state.todaySummary : false}\r\n                                    hourlyForecast={this.state.hourlyForecast ? this.state.hourlyForecast : false}\r\n                                    handleEnter={this.fetchApiData}\r\n                                    isDataLoaded={this.isDataLoaded}\r\n                                />\r\n                            </div>\r\n                            { this.isDataLoaded &&\r\n                                <div className=\"col-xs-12 col-md-6 col-lg-8 mt-3 mb-3 align-self-end\">\r\n                                    <Forecast\r\n                                        city={this.state.city}\r\n                                        forecastData={this.state.dailyForecast ? this.state.dailyForecast : false}\r\n                                    />\r\n                                </div>\r\n                            }\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}