{"version":3,"sources":["components/App/Sidebar/SearchBar/SearchBar.js","components/App/Sidebar/TodayWeather/TodayWeather.js","components/App/Sidebar/TodayForecast/SmallThumbnail/SmallThumbnail.js","components/App/Sidebar/TodayForecast/TodayForecast.js","components/App/Sidebar/Sidebar.js","components/App/Forecast/Thumbnail/Thumbnail.js","components/App/Forecast/Forecast.js","components/App/APIService/APIService.js","components/App/index.js","serviceWorker.js","index.js"],"names":["SearchBar","props","className","onKeyDown","keydown","TodayWeather","todaySummary","name","country","currentTemp","weatherDesc","src","weatherIcon","SmallThumbnail","todayForecast","hour","alt","TodayForecast","forecastData","this","items","length","map","oneDay","i","key","toString","React","Component","Sidebar","handleKeyDown","bind","state","city","weatherInfo","error","e","handleEnter","target","value","hourlyForecast","console","log","Thumbnail","dayName","Forecast","APIService","capitalize","s","charAt","toUpperCase","slice","apiKey","apiUrlWeather","apiUrlHourlyForecast","apiUrlOneCall","defaultCity","weekday","0","1","2","3","4","5","6","date","string","getHours","getMinutes","json","data","Math","floor","main","temp","weather","description","icon","sys","dateNow","Date","array","getFullYear","getMonth","getDate","forEach","el","dateWeather","dt","day","push","getDay","hourToDisplay","convertUTCDateToLocalDate","newDate","getTime","getTimezoneOffset","offset","hours","setHours","service","App","todayWeather","useState","loading","dailyForecast","appState","setAppState","event","axios","get","getApiUrlWeather","getApiKey","then","res","sanitizeDataWeather","getApiUrlOneCall","coord","lat","lon","sanitizeForecast","hourly","daily","catch","response","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"saAWeA,MARf,SAAoBC,GAChB,OACI,yBAAKC,UAAU,0BACX,2BAAOC,UAAWF,EAAMG,YCQrBC,MAZX,SAAsBJ,GAElB,OACI,yBAAKC,UAAU,QACX,4BAAKD,EAAMK,aAAaC,KAAxB,OAAoCN,EAAMK,aAAaE,QAAU,IAAMP,EAAMK,aAAaE,QAAW,IAAM,IAC3G,4BAAKP,EAAMK,aAAaG,YAAcR,EAAMK,aAAaG,YAAc,OAAM,IAC7E,4BAAKR,EAAMK,aAAaI,aACxB,yBAAKR,UAAU,GAAGS,IAAKV,EAAMK,aAAaM,YAAcX,EAAMK,aAAaM,YAAc,O,YCI1FC,MAVf,SAAwBZ,GACpB,OACI,yBAAKC,UAAU,IACX,4BAAKD,EAAMa,cAAcC,MACzB,yBAAKb,UAAU,GAAGS,IAAKV,EAAMa,cAAcF,YAAcX,EAAMa,cAAcF,YAAc,GAAII,IAAI,iBACnG,4BAAKf,EAAMa,cAAcL,YAAcR,EAAMa,cAAcL,YAAc,OAAM,M,OCFtEQ,E,uKAGb,IAAIC,EAAeC,KAAKlB,MAAMa,cAC1BM,EAAQ,GAUZ,OARGF,EAAaG,SACZD,EAAQF,EAAaI,KAAI,SAACC,EAAQC,GAAT,OACrB,yBAAKtB,UAAU,+DACX,kBAAC,EAAD,CAAgBuB,IAAKD,EAAEE,WAAYZ,cAAeS,SAM1D,yBAAKrB,UAAU,aACX,kBAAC,IAAD,CAAiBA,UAAU,oBACvB,yBAAKA,UAAU,0CACVkB,S,GAlBkBO,IAAMC,WCC5BC,G,wDAEjB,WAAY5B,GAAQ,IAAD,8BACf,cAAMA,IAGD6B,cAAgB,EAAKA,cAAcC,KAAnB,gBAGrB,EAAKC,MAAQ,CACTC,KAAM,EAAKhC,MAAMgC,KACjBC,YAAa,KACbC,OAAO,GAVI,E,0DAcJC,GACE,UAAVA,EAAEX,KACDN,KAAKlB,MAAMoC,YAAYD,EAAEE,OAAOC,S,+BAMpC,IAAIjC,EAAea,KAAKlB,MAAMK,aAC1BkC,EAAiBrB,KAAKlB,MAAMuC,eAShC,OAPAC,QAAQC,IAAIpC,GAQR,yBAAKJ,UAAU,qBACX,wBAAIA,UAAU,QAAd,mBACA,kBAAC,EAAD,CAAW+B,KAAMd,KAAKa,MAAMC,KAAM7B,QAASe,KAAKW,gBAChD,kBAAC,EAAD,CAAcxB,aAAcA,IAC5B,kBAAC,EAAD,CAAeQ,cAAe0B,S,GAvCTb,IAAMC,Y,YCQ5Be,MAZf,SAAmB1C,GACf,OACI,yBAAKC,UAAU,IACX,4BAAKD,EAAMiB,aAAaT,YAAcR,EAAMiB,aAAaT,YAAc,OAAM,IAC7E,2BAAIR,EAAMiB,aAAaR,aACvB,yBAAKR,UAAU,GAAGS,IAAKV,EAAMiB,aAAaN,YAAcX,EAAMiB,aAAaN,YAAc,GAAII,IAAI,iBACjG,4BAAKf,EAAMiB,aAAa0B,SACxB,4BAAK3C,EAAMiB,aAAaH,QCHf8B,G,6KAGb,IAAI3B,EAAeC,KAAKlB,MAAMiB,aAC1BE,EAAQ,GAUZ,OARGF,EAAaG,SACZD,EAAQF,EAAaI,KAAI,SAACC,EAAQC,GAAT,OACrB,yBAAKtB,UAAU,0FACX,kBAAC,EAAD,CAAWuB,IAAKD,EAAEE,WAAYR,aAAcK,SAMpD,yBAAKrB,UAAU,sBACX,wBAAIA,UAAU,eAAd,YACA,yBAAKA,UAAU,aACX,kBAAC,IAAD,CAAiBA,UAAU,oBACvB,yBAAKA,UAAU,mBACVkB,U,GApBSO,IAAMC,YCPvBkB,E,WAEjB,aAAe,yBA4CfC,WAAa,SAACC,GACV,MAAiB,kBAANA,EAAuB,GAC3BA,EAAEC,OAAO,GAAGC,cAAgBF,EAAEG,MAAM,IA7C3ChC,KAAKiC,OAAS,mCACdjC,KAAKkC,cAAgB,kDACrBlC,KAAKmC,qBAAuB,mDAE5BnC,KAAKoC,cAAgB,kDAErBpC,KAAKqC,YAAc,OACnBrC,KAAKsC,QAAU,CACXC,EAAG,SACHC,EAAG,SACHC,EAAG,UACHC,EAAG,YACHC,EAAG,WACHC,EAAG,SACHC,EAAG,Y,wDAKP,OAAO7C,KAAKiC,S,yCAIZ,OAAOjC,KAAKkC,gB,gDAGZ,OAAOlC,KAAKmC,uB,yCAGZ,OAAOnC,KAAKoC,gB,uCAGZ,OAAOpC,KAAKqC,c,oCAGFS,GACV,IAAIC,EAAS,GAIb,OAHAA,GAAUD,EAAKE,WAAa,GAAK,IAAMF,EAAKE,WAAaF,EAAKE,WAC9DD,GAAU,IACVA,GAAUD,EAAKG,aAAe,GAAK,IAAMH,EAAKG,aAAeH,EAAKG,e,0CAUlDC,GAUhB,MARe,CACX9D,KAAM8D,EAAKC,KAAK/D,KAChBE,YAAa8D,KAAKC,MAA4B,EAAtBH,EAAKC,KAAKG,KAAKC,MAAY,EACnDhE,YAAaS,KAAK4B,WAAWsB,EAAKC,KAAKK,QAAQ,GAAGC,aAClDhE,YAAa,oCAAsCyD,EAAKC,KAAKK,QAAQ,GAAGE,KAAO,UAC/ErE,QAAS6D,EAAKC,KAAKQ,IAAItE,W,uCAOb6D,GAAO,IAAD,OACdU,EAAU,IAAIC,KAShBC,GARe,IAAID,KAAKD,EAAQG,cAAeH,EAAQI,WAAYJ,EAAQK,UAAY,GAQ/E,IAgBZ,OAbAf,EAAKgB,SAAQ,SAAAC,GACT,IAAMC,EAAc,IAAIP,KAAa,IAARM,EAAGE,IAC5Bd,EAAOY,EAAGZ,KAAKe,IAAMH,EAAGZ,KAAKe,IAAMH,EAAGZ,KAE1CO,EAAMS,KAAK,CACPjF,YAAa8D,KAAKC,MAAa,EAAPE,GAAY,EACpChE,YAAa,EAAKqC,WAAWuC,EAAGX,QAAQ,GAAGC,aAC3ChE,YAAa,oCAAsC0E,EAAGX,QAAQ,GAAGE,KAAO,UACxEjC,QAAS,EAAKa,QAAQ8B,EAAYI,UAClC5E,KAAM,EAAK6E,cAAc,EAAKC,0BAA0BN,SAIzDN,EAAM9B,MAAM,EAAG,M,gDAGAc,GACtB,IAAI6B,EAAU,IAAId,KAAKf,EAAK8B,UAAmC,GAAzB9B,EAAK+B,oBAAuB,KAE9DC,EAAShC,EAAK+B,oBAAsB,GACpCE,EAAQjC,EAAKE,WAIjB,OAFA2B,EAAQK,SAASD,EAAQD,GAElBH,M,sBC/FTM,G,MAAU,IAAItD,GA0DLuD,MAxDf,WAAiB,IAUTC,EAVQ,EAEoBC,mBAAS,CACrCC,SAAS,EACTlG,aAAc,GACdkC,eAAgB,GAChBiE,cAAe,GACfxE,KAAM,OAPE,mBAELyE,EAFK,KAEKC,EAFL,KA4BZ,OACI,yBAAKzG,UAAU,OACX,4BAAQA,UAAU,eAElB,0BAAMA,UAAU,YACZ,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,qDACX,kBAAC,EAAD,CACI+B,KAAMyE,EAASzE,KACf3B,eAAcoG,EAASpG,cAAeoG,EAASpG,aAC/CkC,iBAAgBkE,EAASlE,gBAAiBkE,EAASlE,eACnDH,YA5BP,SAACuE,GAClBC,IAAMC,IAAN,UAAaV,EAAQW,mBAArB,kBAAiDX,EAAQY,YAAzD,cAA0EJ,EAA1E,0BACKK,MAAK,SAAAC,GAGF,OAFAzE,QAAQC,IAAIwE,GACZZ,EAAeF,EAAQe,oBAAoBD,GACpCL,IAAMC,IAAN,UAAaV,EAAQgB,mBAArB,kBAAiDhB,EAAQY,YAAzD,gBAA4EE,EAAI5C,KAAK+C,MAAMC,IAA3F,gBAAsGJ,EAAI5C,KAAK+C,MAAME,IAArH,6CACRN,MAAK,SAAAC,GACJzE,QAAQC,IAAIwE,GACZP,EAAY,CACRrG,aAAcgG,EACd9D,eAAgB4D,EAAQoB,iBAAiBN,EAAI5C,KAAKmD,QAClDhB,cAAeL,EAAQoB,iBAAiBN,EAAI5C,KAAKoD,YAEtDC,OAAM,SAAAxF,GAAK,OAAIM,QAAQC,IAAIP,EAAMyF,iBAkBxB,yBAAK1H,UAAU,yCACX,kBAAC,EAAD,CACI+B,KAAMyE,EAASzE,KACff,eAAcwF,EAASD,eAAgBC,EAASD,sBC5C5DoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdhB,OAAM,SAAAxF,GACLM,QAAQN,MAAMA,EAAMyG,c","file":"static/js/main.c76e4d64.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./SearchBar.css\";\r\n\r\nfunction SearchBar (props) {\r\n    return (\r\n        <div className=\"component-search-input\">\r\n            <input onKeyDown={props.keydown} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\n\r\n    function TodayWeather(props) {\r\n\r\n        return (\r\n            <div className=\"mt-5\">\r\n                <h1>{props.todaySummary.name}&nbsp;{props.todaySummary.country ? '(' + props.todaySummary.country  + ')' : ''}</h1>\r\n                <h1>{props.todaySummary.currentTemp ? props.todaySummary.currentTemp + \"°\" : \"\"}</h1>\r\n                <h1>{props.todaySummary.weatherDesc}</h1>\r\n                <img className=\"\" src={props.todaySummary.weatherIcon ? props.todaySummary.weatherIcon : \"\"} />\r\n            </div>\r\n        );\r\n    }\r\n\r\nexport default TodayWeather;\r\n","import React from 'react';\r\nimport './SmallThumbnail.css';\r\n\r\nfunction SmallThumbnail(props) {\r\n    return (\r\n        <div className=\"\" >\r\n            <h5>{props.todayForecast.hour}</h5>\r\n            <img className=\"\" src={props.todayForecast.weatherIcon ? props.todayForecast.weatherIcon : \"\"} alt=\"Weather Icon\"/>\r\n            <h4>{props.todayForecast.currentTemp ? props.todayForecast.currentTemp + \"°\" : \"\"}</h4>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SmallThumbnail;\r\n","import React from 'react';\r\nimport \"./TodayForecast.css\";\r\nimport SmallThumbnail from \"./SmallThumbnail\";\r\n\r\nimport ScrollContainer from 'react-indiana-drag-scroll';\r\n\r\nexport default class TodayForecast extends React.Component {\r\n    render() {\r\n\r\n        let forecastData = this.props.todayForecast;\r\n        let items = [];\r\n\r\n        if(forecastData.length) {\r\n            items = forecastData.map((oneDay, i) => (\r\n                <div className=\"wrapper-thumbnail mt-2 mb-5 ml-2 mr-2 col-xs-12 text-center\">\r\n                    <SmallThumbnail key={i.toString()} todayForecast={oneDay} />\r\n                </div>\r\n            ));\r\n        }\r\n\r\n        return(\r\n            <div className=\"container\">\r\n                <ScrollContainer className=\"scroll-container\">\r\n                    <div className=\"row flex-nowrap wrapper-smallthumbnail\">\r\n                        {items}\r\n                    </div>\r\n                </ScrollContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport SearchBar from './SearchBar';\r\nimport TodayWeather from './TodayWeather';\r\nimport TodayForecast from './TodayForecast';\r\n\r\nimport \"./Sidebar.css\";\r\n\r\nexport default class Sidebar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        // Bind the this context to the handler function\r\n        this.handleKeyDown = this.handleKeyDown.bind(this);\r\n\r\n        // Set some state\r\n        this.state = {\r\n            city: this.props.city,\r\n            weatherInfo: null,\r\n            error: false,\r\n        };\r\n    }\r\n\r\n    handleKeyDown (e) {\r\n        if(e.key === \"Enter\") {\r\n            this.props.handleEnter(e.target.value);\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let todaySummary = this.props.todaySummary;\r\n        let hourlyForecast = this.props.hourlyForecast;\r\n\r\n        console.log(todaySummary);\r\n\r\n        // If not empty today summary\r\n            // if(todaySummary.length > 0) {\r\n            //     todaySummary = JSON.parse(todaySummary);\r\n            // }\r\n\r\n        return (\r\n            <div className=\"component-sidebar\">\r\n                <h1 className=\"mb-5\">Today's weather</h1>\r\n                <SearchBar city={this.state.city} keydown={this.handleKeyDown} />\r\n                <TodayWeather todaySummary={todaySummary} />\r\n                <TodayForecast todayForecast={hourlyForecast} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './Thumbnail.css';\r\n\r\nfunction Thumbnail(props) {\r\n    return (\r\n        <div className=\"\" >\r\n            <h4>{props.forecastData.currentTemp ? props.forecastData.currentTemp + \"°\" : \"\"}</h4>\r\n            <p>{props.forecastData.weatherDesc}</p>\r\n            <img className=\"\" src={props.forecastData.weatherIcon ? props.forecastData.weatherIcon : \"\"} alt=\"Weather Icon\"/>\r\n            <h4>{props.forecastData.dayName}</h4>\r\n            <h5>{props.forecastData.hour}</h5>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Thumbnail;\r\n","import React from 'react';\r\nimport './Forecast.css';\r\nimport Thumbnail from './Thumbnail';\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\n\r\nimport ScrollContainer from 'react-indiana-drag-scroll';\r\n\r\nexport default class Forecast extends React.Component {\r\n    render() {\r\n\r\n        let forecastData = this.props.forecastData;\r\n        let items = [];\r\n\r\n        if(forecastData.length) {\r\n            items = forecastData.map((oneDay, i) => (\r\n                <div className=\"wrapper-thumbnail mt-2 mb-2 ml-2 mr-2 col-xs-12 col-md-6 col-lg-3 col-xl-2 text-center\">\r\n                    <Thumbnail key={i.toString()} forecastData={oneDay} />\r\n                </div>\r\n            ));\r\n        }\r\n\r\n        return(\r\n            <div className=\"component-forecast\">\r\n                <h1 className=\"text-center\">Forecast</h1>\r\n                <div className=\"container\">\r\n                    <ScrollContainer className=\"scroll-container\">\r\n                        <div className=\"row flex-nowrap\">\r\n                            {items}\r\n                        </div>\r\n                    </ScrollContainer>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export default class APIService {\r\n\r\n    constructor() {\r\n        this.apiKey = \"109ff3545de4ef5f87dacbb3775a0e1f\";\r\n        this.apiUrlWeather = \"https://api.openweathermap.org/data/2.5/weather\";\r\n        this.apiUrlHourlyForecast = \"https://api.openweathermap.org/data/2.5/forecast\";\r\n\r\n        this.apiUrlOneCall = \"https://api.openweathermap.org/data/2.5/onecall\";\r\n\r\n        this.defaultCity = \"Nice\";\r\n        this.weekday = {\r\n            0: \"Sunday\",\r\n            1: \"Monday\",\r\n            2: \"Tuesday\",\r\n            3: \"Wednesday\",\r\n            4: \"Thursday\",\r\n            5: \"Friday\",\r\n            6: \"Saturday\",\r\n        };\r\n    }\r\n\r\n    getApiKey() {\r\n        return this.apiKey;\r\n    }\r\n\r\n    getApiUrlWeather() {\r\n        return this.apiUrlWeather;\r\n    }\r\n    getApiUrlHourlyForecast() {\r\n        return this.apiUrlHourlyForecast;\r\n    }\r\n    getApiUrlOneCall() {\r\n        return this.apiUrlOneCall;\r\n    }\r\n    getDefaultCity() {\r\n        return this.defaultCity;\r\n    }\r\n\r\n    hourToDisplay(date) {\r\n        var string = \"\";\r\n        string += date.getHours() < 10 ? \"0\" + date.getHours() : date.getHours();\r\n        string += \":\";\r\n        string += date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes();\r\n        return string;\r\n    }\r\n\r\n    capitalize = (s) => {\r\n        if (typeof s !== 'string') return ''\r\n        return s.charAt(0).toUpperCase() + s.slice(1)\r\n    }\r\n\r\n\r\n    sanitizeDataWeather(json) {\r\n\r\n        var jsonData = {\r\n            name: json.data.name,\r\n            currentTemp: Math.floor(json.data.main.temp * 1) / 1,\r\n            weatherDesc: this.capitalize(json.data.weather[0].description),\r\n            weatherIcon: \"http://openweathermap.org/img/wn/\" + json.data.weather[0].icon + \"@2x.png\",\r\n            country: json.data.sys.country\r\n        };\r\n\r\n        return jsonData;\r\n    }\r\n\r\n\r\n    sanitizeForecast (json) {\r\n        const dateNow = new Date();\r\n        var dateTomorrow = new Date(dateNow.getFullYear(), dateNow.getMonth(), dateNow.getDate() + 1);\r\n\r\n        // Check if date now and\r\n        const datesAreOnSameDay = (first, second) =>\r\n            first.getFullYear() === second.getFullYear() &&\r\n            first.getMonth() === second.getMonth() &&\r\n            first.getDate() === second.getDate();\r\n\r\n        var array = [];\r\n\r\n\r\n        json.forEach(el => {\r\n            const dateWeather = new Date(el.dt * 1000);\r\n            var temp = el.temp.day ? el.temp.day : el.temp;\r\n\r\n            array.push({\r\n                currentTemp: Math.floor(temp * 1) / 1,\r\n                weatherDesc: this.capitalize(el.weather[0].description),\r\n                weatherIcon: \"http://openweathermap.org/img/wn/\" + el.weather[0].icon + \"@2x.png\",\r\n                dayName: this.weekday[dateWeather.getDay()],\r\n                hour: this.hourToDisplay(this.convertUTCDateToLocalDate(dateWeather)),\r\n            })\r\n        });\r\n\r\n        return array.slice(0, 24);\r\n    }\r\n\r\n    convertUTCDateToLocalDate(date) {\r\n        var newDate = new Date(date.getTime()+date.getTimezoneOffset()*60*1000);\r\n\r\n        var offset = date.getTimezoneOffset() / 60;\r\n        var hours = date.getHours();\r\n\r\n        newDate.setHours(hours - offset);\r\n\r\n        return newDate;\r\n    }\r\n}\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Sidebar from './Sidebar';\r\nimport Forecast from './Forecast';\r\nimport APIService from './APIService';\r\nimport axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst service = new APIService();\r\n\r\nfunction App () {\r\n\r\n    const [appState, setAppState] = useState({\r\n        loading: false,\r\n        todaySummary: [],\r\n        hourlyForecast: [],\r\n        dailyForecast: [],\r\n        city: null,\r\n    });\r\n\r\n    var todayWeather;\r\n\r\n    const fetchApiData = (event) => {\r\n        axios.get(`${service.getApiUrlWeather()}?appid=${service.getApiKey()}&q=${event}&units=metric&lang=fr`)\r\n            .then(res => {\r\n                console.log(res);\r\n                todayWeather = service.sanitizeDataWeather(res);\r\n                return axios.get(`${service.getApiUrlOneCall()}?appid=${service.getApiKey()}&lat=${res.data.coord.lat}&lon=${res.data.coord.lon}&exclude=current&units=metric&lang=fr`);\r\n            }).then(res => {\r\n                console.log(res);\r\n                setAppState({\r\n                    todaySummary: todayWeather,\r\n                    hourlyForecast: service.sanitizeForecast(res.data.hourly),\r\n                    dailyForecast: service.sanitizeForecast(res.data.daily)\r\n                });\r\n            }).catch(error => console.log(error.response));\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n            </header>\r\n            <body className=\"App-body\">\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row h-100\">\r\n                        <div className=\"col-xs-12 col-md-6 col-lg-4 mt-3 mb-3 text-center\">\r\n                            <Sidebar\r\n                                city={appState.city}\r\n                                todaySummary={appState.todaySummary ? appState.todaySummary : false}\r\n                                hourlyForecast={appState.hourlyForecast ? appState.hourlyForecast : false}\r\n                                handleEnter={fetchApiData}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-xs-12 col-md-6 col-lg-8 mt-3 mb-3\">\r\n                            <Forecast\r\n                                city={appState.city}\r\n                                forecastData={appState.dailyForecast ? appState.dailyForecast : false}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </body>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}